C51 COMPILER V9.52.0.0   UART                                                              03/06/2017 18:55:09 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE UART
OBJECT MODULE PLACED IN uart.OBJ
COMPILER INVOKED BY: E:\Keil\C51\BIN\C51.EXE uart.c LARGE BROWSE DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          /******************************************************
   2           * FileName:      uart.c
   3           * Company:       ????
   4           * Date:           2016/07/08  20:02
   5           * Description:    Lobot???????????,??stc89c52rc??,
   6           *                  ??????????????????????
   7           *                  @@????:????????????9600???@@
   8           *****************************************************/
   9          #include "uart.h"
  10          #include "LobotSerialServo.h"
  11          
  12          #include <string.h>
  13          void uartInit() //波特率115200
  14          {
  15   1        PCON &= 0x7F;   //??????
  16   1        SCON = 0x50;    //8???,?????
  17   1        AUXR |= 0x04;   //???????????Fosc,?1T
  18   1        BRT = 0xFD;   //?????????????
  19   1        AUXR |= 0x01;   //??1?????????????????
  20   1        AUXR |= 0x10;   //??????????
  21   1        ES = 1;           //??Uart??
  22   1        EA = 1;           //???
  23   1      }
  24          
  25          
  26          uint8_t busy = 0;   //???????
  27          
  28          /*********************************************************************************
  29           * Function:    uartWriteByte
  30           * Description:??????????
  31           * Parameters:   dat:????
  32           * Return:       ???
  33           * Others:
  34           **********************************************************************************/
  35          void uartWriteByte(uint8_t dat)
  36          {
  37   1        while (busy);
  38   1        busy = 1;
  39   1        SBUF = dat;
  40   1      }
  41          
  42          /*********************************************************************************
  43           * Function:    uartWriteBuf
  44           * Description:??????
  45           * Parameters:   buf:???????,len:??????
  46           * Return:       ???
  47           * Others:
  48           **********************************************************************************/
  49          void uartWriteBuf(uint8_t *buf, uint8_t len)
  50          {
  51   1        ES = 1;
  52   1        while (len--) {
  53   2          while (busy);
  54   2          busy = 1;
  55   2          SBUF = *buf++;
C51 COMPILER V9.52.0.0   UART                                                              03/06/2017 18:55:09 PAGE 2   

  56   2        }
  57   1      }
  58          
  59          /*********************************************************************************
  60           * Function:  receiveHandle
  61           * Description: ??????,??????,????
  62           * Parameters:   ?????
  63           * Return:       ???
  64           * Others:
  65           **********************************************************************************/
  66          
  67          uint8_t UART_RX_BUF[24];
  68          bool isUartRxCompleted = false;
  69          
  70          void receiveHandle(void) interrupt 4
  71          {
  72   1        uint8_t rx;
  73   1        static bool isGotFrameHeader = false;
  74   1        static uint8_t frameHeaderCount = 0;
  75   1        static uint8_t dataLength = 2;
  76   1        static uint8_t dataCount = 0;
  77   1        
  78   1        if (RI) {  //????
  79   2          RI = 0;  //清楚标识
  80   2          rx = SBUF;   //读取接收寄存器
  81   2          
  82   2          if(!isGotFrameHeader)
  83   2          {
  84   3            if(rx == 0x55)
  85   3            {
  86   4              frameHeaderCount++;
  87   4              if(frameHeaderCount == 2)
  88   4              {
  89   5                frameHeaderCount = 0;
  90   5                isGotFrameHeader = true;
  91   5                dataCount = 1;
  92   5              }
  93   4            }
  94   3            else
  95   3            {
  96   4              isGotFrameHeader = false;
  97   4              dataCount = 0;
  98   4              frameHeaderCount = 0;
  99   4            }
 100   3          }
 101   2          if(isGotFrameHeader)
 102   2          {
 103   3            UART_RX_BUF[dataCount] = rx;
 104   3            if(dataCount == 3)
 105   3            {
 106   4              dataLength= UART_RX_BUF[dataCount];
 107   4              if(dataLength < 3 || dataLength > 8)
 108   4              {
 109   5                dataLength = 3;
 110   5                isGotFrameHeader = false;
 111   5              }
 112   4            }
 113   3            dataCount++;
 114   3            if(dataCount == dataLength + 3)
 115   3            {
 116   4              if(isUartRxCompleted == false)
 117   4              {
C51 COMPILER V9.52.0.0   UART                                                              03/06/2017 18:55:09 PAGE 3   

 118   5                isUartRxCompleted = true;
 119   5                memcpy(LobotRxBuf, UART_RX_BUF, dataCount+2);
 120   5              }
 121   4              isGotFrameHeader = false;
 122   4            }
 123   3          }
 124   2        }
 125   1        if (TI) {    
 126   2          TI = 0;
 127   2          busy = 0; 
 128   2        }
 129   1      }
 130          
 131          bool isRxCompleted(void)
 132          {
 133   1        if(isUartRxCompleted)
 134   1        {
 135   2          isUartRxCompleted = false;
 136   2          return true;
 137   2        }
 138   1        else
 139   1        {
 140   2          return false;
 141   2        }
 142   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    350    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     30       3
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
